// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Moneychanger.proto

#ifndef PROTOBUF_Moneychanger_2eproto__INCLUDED
#define PROTOBUF_Moneychanger_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "Generics.pb.h"
#include "Bitcoin.pb.h"
// @@protoc_insertion_point(includes)

namespace opentxs {
namespace OTDB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Moneychanger_2eproto();
void protobuf_AssignDesc_Moneychanger_2eproto();
void protobuf_ShutdownFile_Moneychanger_2eproto();

class ServerInfo_InternalPB;
class ContactNym_InternalPB;
class ContactAcct_InternalPB;
class Contact_InternalPB;
class AddressBook_InternalPB;
class WalletData_InternalPB;

// ===================================================================

class ServerInfo_InternalPB : public ::google::protobuf::MessageLite {
 public:
  ServerInfo_InternalPB();
  virtual ~ServerInfo_InternalPB();

  ServerInfo_InternalPB(const ServerInfo_InternalPB& from);

  inline ServerInfo_InternalPB& operator=(const ServerInfo_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ServerInfo_InternalPB& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerInfo_InternalPB* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerInfo_InternalPB* other);

  // implements Message ----------------------------------------------

  ServerInfo_InternalPB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerInfo_InternalPB& from);
  void MergeFrom(const ServerInfo_InternalPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_type = 1;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  inline const ::std::string& server_type() const;
  inline void set_server_type(const ::std::string& value);
  inline void set_server_type(const char* value);
  inline void set_server_type(const char* value, size_t size);
  inline ::std::string* mutable_server_type();
  inline ::std::string* release_server_type();
  inline void set_allocated_server_type(::std::string* server_type);

  // optional string notary_id = 2;
  inline bool has_notary_id() const;
  inline void clear_notary_id();
  static const int kNotaryIdFieldNumber = 2;
  inline const ::std::string& notary_id() const;
  inline void set_notary_id(const ::std::string& value);
  inline void set_notary_id(const char* value);
  inline void set_notary_id(const char* value, size_t size);
  inline ::std::string* mutable_notary_id();
  inline ::std::string* release_notary_id();
  inline void set_allocated_notary_id(::std::string* notary_id);

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.ServerInfo_InternalPB)
 private:
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_notary_id();
  inline void clear_has_notary_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* server_type_;
  ::std::string* notary_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Moneychanger_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Moneychanger_2eproto();
  #endif
  friend void protobuf_AssignDesc_Moneychanger_2eproto();
  friend void protobuf_ShutdownFile_Moneychanger_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo_InternalPB* default_instance_;
};
// -------------------------------------------------------------------

class ContactNym_InternalPB : public ::google::protobuf::MessageLite {
 public:
  ContactNym_InternalPB();
  virtual ~ContactNym_InternalPB();

  ContactNym_InternalPB(const ContactNym_InternalPB& from);

  inline ContactNym_InternalPB& operator=(const ContactNym_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ContactNym_InternalPB& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ContactNym_InternalPB* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ContactNym_InternalPB* other);

  // implements Message ----------------------------------------------

  ContactNym_InternalPB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ContactNym_InternalPB& from);
  void MergeFrom(const ContactNym_InternalPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gui_label = 1;
  inline bool has_gui_label() const;
  inline void clear_gui_label();
  static const int kGuiLabelFieldNumber = 1;
  inline const ::std::string& gui_label() const;
  inline void set_gui_label(const ::std::string& value);
  inline void set_gui_label(const char* value);
  inline void set_gui_label(const char* value, size_t size);
  inline ::std::string* mutable_gui_label();
  inline ::std::string* release_gui_label();
  inline void set_allocated_gui_label(::std::string* gui_label);

  // optional string nym_type = 2;
  inline bool has_nym_type() const;
  inline void clear_nym_type();
  static const int kNymTypeFieldNumber = 2;
  inline const ::std::string& nym_type() const;
  inline void set_nym_type(const ::std::string& value);
  inline void set_nym_type(const char* value);
  inline void set_nym_type(const char* value, size_t size);
  inline ::std::string* mutable_nym_type();
  inline ::std::string* release_nym_type();
  inline void set_allocated_nym_type(::std::string* nym_type);

  // optional string nym_id = 3;
  inline bool has_nym_id() const;
  inline void clear_nym_id();
  static const int kNymIdFieldNumber = 3;
  inline const ::std::string& nym_id() const;
  inline void set_nym_id(const ::std::string& value);
  inline void set_nym_id(const char* value);
  inline void set_nym_id(const char* value, size_t size);
  inline ::std::string* mutable_nym_id();
  inline ::std::string* release_nym_id();
  inline void set_allocated_nym_id(::std::string* nym_id);

  // optional string public_key = 4;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 4;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const char* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // optional string memo = 5;
  inline bool has_memo() const;
  inline void clear_memo();
  static const int kMemoFieldNumber = 5;
  inline const ::std::string& memo() const;
  inline void set_memo(const ::std::string& value);
  inline void set_memo(const char* value);
  inline void set_memo(const char* value, size_t size);
  inline ::std::string* mutable_memo();
  inline ::std::string* release_memo();
  inline void set_allocated_memo(::std::string* memo);

  // repeated .opentxs.OTDB.ServerInfo_InternalPB servers = 6;
  inline int servers_size() const;
  inline void clear_servers();
  static const int kServersFieldNumber = 6;
  inline const ::opentxs::OTDB::ServerInfo_InternalPB& servers(int index) const;
  inline ::opentxs::OTDB::ServerInfo_InternalPB* mutable_servers(int index);
  inline ::opentxs::OTDB::ServerInfo_InternalPB* add_servers();
  inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB >&
      servers() const;
  inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB >*
      mutable_servers();

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.ContactNym_InternalPB)
 private:
  inline void set_has_gui_label();
  inline void clear_has_gui_label();
  inline void set_has_nym_type();
  inline void clear_has_nym_type();
  inline void set_has_nym_id();
  inline void clear_has_nym_id();
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_memo();
  inline void clear_has_memo();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gui_label_;
  ::std::string* nym_type_;
  ::std::string* nym_id_;
  ::std::string* public_key_;
  ::std::string* memo_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB > servers_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Moneychanger_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Moneychanger_2eproto();
  #endif
  friend void protobuf_AssignDesc_Moneychanger_2eproto();
  friend void protobuf_ShutdownFile_Moneychanger_2eproto();

  void InitAsDefaultInstance();
  static ContactNym_InternalPB* default_instance_;
};
// -------------------------------------------------------------------

class ContactAcct_InternalPB : public ::google::protobuf::MessageLite {
 public:
  ContactAcct_InternalPB();
  virtual ~ContactAcct_InternalPB();

  ContactAcct_InternalPB(const ContactAcct_InternalPB& from);

  inline ContactAcct_InternalPB& operator=(const ContactAcct_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ContactAcct_InternalPB& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ContactAcct_InternalPB* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ContactAcct_InternalPB* other);

  // implements Message ----------------------------------------------

  ContactAcct_InternalPB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ContactAcct_InternalPB& from);
  void MergeFrom(const ContactAcct_InternalPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gui_label = 1;
  inline bool has_gui_label() const;
  inline void clear_gui_label();
  static const int kGuiLabelFieldNumber = 1;
  inline const ::std::string& gui_label() const;
  inline void set_gui_label(const ::std::string& value);
  inline void set_gui_label(const char* value);
  inline void set_gui_label(const char* value, size_t size);
  inline ::std::string* mutable_gui_label();
  inline ::std::string* release_gui_label();
  inline void set_allocated_gui_label(::std::string* gui_label);

  // optional string server_type = 2;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  inline const ::std::string& server_type() const;
  inline void set_server_type(const ::std::string& value);
  inline void set_server_type(const char* value);
  inline void set_server_type(const char* value, size_t size);
  inline ::std::string* mutable_server_type();
  inline ::std::string* release_server_type();
  inline void set_allocated_server_type(::std::string* server_type);

  // optional string notary_id = 3;
  inline bool has_notary_id() const;
  inline void clear_notary_id();
  static const int kNotaryIdFieldNumber = 3;
  inline const ::std::string& notary_id() const;
  inline void set_notary_id(const ::std::string& value);
  inline void set_notary_id(const char* value);
  inline void set_notary_id(const char* value, size_t size);
  inline ::std::string* mutable_notary_id();
  inline ::std::string* release_notary_id();
  inline void set_allocated_notary_id(::std::string* notary_id);

  // optional string instrument_definition_id = 4;
  inline bool has_instrument_definition_id() const;
  inline void clear_instrument_definition_id();
  static const int kInstrumentDefinitionIdFieldNumber = 4;
  inline const ::std::string& instrument_definition_id() const;
  inline void set_instrument_definition_id(const ::std::string& value);
  inline void set_instrument_definition_id(const char* value);
  inline void set_instrument_definition_id(const char* value, size_t size);
  inline ::std::string* mutable_instrument_definition_id();
  inline ::std::string* release_instrument_definition_id();
  inline void set_allocated_instrument_definition_id(::std::string* instrument_definition_id);

  // optional string acct_id = 5;
  inline bool has_acct_id() const;
  inline void clear_acct_id();
  static const int kAcctIdFieldNumber = 5;
  inline const ::std::string& acct_id() const;
  inline void set_acct_id(const ::std::string& value);
  inline void set_acct_id(const char* value);
  inline void set_acct_id(const char* value, size_t size);
  inline ::std::string* mutable_acct_id();
  inline ::std::string* release_acct_id();
  inline void set_allocated_acct_id(::std::string* acct_id);

  // optional string nym_id = 6;
  inline bool has_nym_id() const;
  inline void clear_nym_id();
  static const int kNymIdFieldNumber = 6;
  inline const ::std::string& nym_id() const;
  inline void set_nym_id(const ::std::string& value);
  inline void set_nym_id(const char* value);
  inline void set_nym_id(const char* value, size_t size);
  inline ::std::string* mutable_nym_id();
  inline ::std::string* release_nym_id();
  inline void set_allocated_nym_id(::std::string* nym_id);

  // optional string memo = 7;
  inline bool has_memo() const;
  inline void clear_memo();
  static const int kMemoFieldNumber = 7;
  inline const ::std::string& memo() const;
  inline void set_memo(const ::std::string& value);
  inline void set_memo(const char* value);
  inline void set_memo(const char* value, size_t size);
  inline ::std::string* mutable_memo();
  inline ::std::string* release_memo();
  inline void set_allocated_memo(::std::string* memo);

  // optional string public_key = 8;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 8;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const char* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.ContactAcct_InternalPB)
 private:
  inline void set_has_gui_label();
  inline void clear_has_gui_label();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_notary_id();
  inline void clear_has_notary_id();
  inline void set_has_instrument_definition_id();
  inline void clear_has_instrument_definition_id();
  inline void set_has_acct_id();
  inline void clear_has_acct_id();
  inline void set_has_nym_id();
  inline void clear_has_nym_id();
  inline void set_has_memo();
  inline void clear_has_memo();
  inline void set_has_public_key();
  inline void clear_has_public_key();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gui_label_;
  ::std::string* server_type_;
  ::std::string* notary_id_;
  ::std::string* instrument_definition_id_;
  ::std::string* acct_id_;
  ::std::string* nym_id_;
  ::std::string* memo_;
  ::std::string* public_key_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Moneychanger_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Moneychanger_2eproto();
  #endif
  friend void protobuf_AssignDesc_Moneychanger_2eproto();
  friend void protobuf_ShutdownFile_Moneychanger_2eproto();

  void InitAsDefaultInstance();
  static ContactAcct_InternalPB* default_instance_;
};
// -------------------------------------------------------------------

class Contact_InternalPB : public ::google::protobuf::MessageLite {
 public:
  Contact_InternalPB();
  virtual ~Contact_InternalPB();

  Contact_InternalPB(const Contact_InternalPB& from);

  inline Contact_InternalPB& operator=(const Contact_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Contact_InternalPB& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Contact_InternalPB* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Contact_InternalPB* other);

  // implements Message ----------------------------------------------

  Contact_InternalPB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Contact_InternalPB& from);
  void MergeFrom(const Contact_InternalPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gui_label = 1;
  inline bool has_gui_label() const;
  inline void clear_gui_label();
  static const int kGuiLabelFieldNumber = 1;
  inline const ::std::string& gui_label() const;
  inline void set_gui_label(const ::std::string& value);
  inline void set_gui_label(const char* value);
  inline void set_gui_label(const char* value, size_t size);
  inline ::std::string* mutable_gui_label();
  inline ::std::string* release_gui_label();
  inline void set_allocated_gui_label(::std::string* gui_label);

  // optional string contact_id = 2;
  inline bool has_contact_id() const;
  inline void clear_contact_id();
  static const int kContactIdFieldNumber = 2;
  inline const ::std::string& contact_id() const;
  inline void set_contact_id(const ::std::string& value);
  inline void set_contact_id(const char* value);
  inline void set_contact_id(const char* value, size_t size);
  inline ::std::string* mutable_contact_id();
  inline ::std::string* release_contact_id();
  inline void set_allocated_contact_id(::std::string* contact_id);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string memo = 4;
  inline bool has_memo() const;
  inline void clear_memo();
  static const int kMemoFieldNumber = 4;
  inline const ::std::string& memo() const;
  inline void set_memo(const ::std::string& value);
  inline void set_memo(const char* value);
  inline void set_memo(const char* value, size_t size);
  inline ::std::string* mutable_memo();
  inline ::std::string* release_memo();
  inline void set_allocated_memo(::std::string* memo);

  // optional string public_key = 5;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 5;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const char* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // repeated .opentxs.OTDB.ContactNym_InternalPB nyms = 6;
  inline int nyms_size() const;
  inline void clear_nyms();
  static const int kNymsFieldNumber = 6;
  inline const ::opentxs::OTDB::ContactNym_InternalPB& nyms(int index) const;
  inline ::opentxs::OTDB::ContactNym_InternalPB* mutable_nyms(int index);
  inline ::opentxs::OTDB::ContactNym_InternalPB* add_nyms();
  inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB >&
      nyms() const;
  inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB >*
      mutable_nyms();

  // repeated .opentxs.OTDB.ContactAcct_InternalPB accounts = 7;
  inline int accounts_size() const;
  inline void clear_accounts();
  static const int kAccountsFieldNumber = 7;
  inline const ::opentxs::OTDB::ContactAcct_InternalPB& accounts(int index) const;
  inline ::opentxs::OTDB::ContactAcct_InternalPB* mutable_accounts(int index);
  inline ::opentxs::OTDB::ContactAcct_InternalPB* add_accounts();
  inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB >&
      accounts() const;
  inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB >*
      mutable_accounts();

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.Contact_InternalPB)
 private:
  inline void set_has_gui_label();
  inline void clear_has_gui_label();
  inline void set_has_contact_id();
  inline void clear_has_contact_id();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_memo();
  inline void clear_has_memo();
  inline void set_has_public_key();
  inline void clear_has_public_key();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gui_label_;
  ::std::string* contact_id_;
  ::std::string* email_;
  ::std::string* memo_;
  ::std::string* public_key_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB > nyms_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB > accounts_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Moneychanger_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Moneychanger_2eproto();
  #endif
  friend void protobuf_AssignDesc_Moneychanger_2eproto();
  friend void protobuf_ShutdownFile_Moneychanger_2eproto();

  void InitAsDefaultInstance();
  static Contact_InternalPB* default_instance_;
};
// -------------------------------------------------------------------

class AddressBook_InternalPB : public ::google::protobuf::MessageLite {
 public:
  AddressBook_InternalPB();
  virtual ~AddressBook_InternalPB();

  AddressBook_InternalPB(const AddressBook_InternalPB& from);

  inline AddressBook_InternalPB& operator=(const AddressBook_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AddressBook_InternalPB& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AddressBook_InternalPB* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AddressBook_InternalPB* other);

  // implements Message ----------------------------------------------

  AddressBook_InternalPB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AddressBook_InternalPB& from);
  void MergeFrom(const AddressBook_InternalPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.OTDB.Contact_InternalPB contacts = 1;
  inline int contacts_size() const;
  inline void clear_contacts();
  static const int kContactsFieldNumber = 1;
  inline const ::opentxs::OTDB::Contact_InternalPB& contacts(int index) const;
  inline ::opentxs::OTDB::Contact_InternalPB* mutable_contacts(int index);
  inline ::opentxs::OTDB::Contact_InternalPB* add_contacts();
  inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB >&
      contacts() const;
  inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB >*
      mutable_contacts();

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.AddressBook_InternalPB)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB > contacts_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Moneychanger_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Moneychanger_2eproto();
  #endif
  friend void protobuf_AssignDesc_Moneychanger_2eproto();
  friend void protobuf_ShutdownFile_Moneychanger_2eproto();

  void InitAsDefaultInstance();
  static AddressBook_InternalPB* default_instance_;
};
// -------------------------------------------------------------------

class WalletData_InternalPB : public ::google::protobuf::MessageLite {
 public:
  WalletData_InternalPB();
  virtual ~WalletData_InternalPB();

  WalletData_InternalPB(const WalletData_InternalPB& from);

  inline WalletData_InternalPB& operator=(const WalletData_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const WalletData_InternalPB& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WalletData_InternalPB* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WalletData_InternalPB* other);

  // implements Message ----------------------------------------------

  WalletData_InternalPB* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WalletData_InternalPB& from);
  void MergeFrom(const WalletData_InternalPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .opentxs.OTDB.BitcoinServer_InternalPB bitcoin_server = 1;
  inline int bitcoin_server_size() const;
  inline void clear_bitcoin_server();
  static const int kBitcoinServerFieldNumber = 1;
  inline const ::opentxs::OTDB::BitcoinServer_InternalPB& bitcoin_server(int index) const;
  inline ::opentxs::OTDB::BitcoinServer_InternalPB* mutable_bitcoin_server(int index);
  inline ::opentxs::OTDB::BitcoinServer_InternalPB* add_bitcoin_server();
  inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB >&
      bitcoin_server() const;
  inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB >*
      mutable_bitcoin_server();

  // repeated .opentxs.OTDB.BitcoinAcct_InternalPB bitcoin_acct = 2;
  inline int bitcoin_acct_size() const;
  inline void clear_bitcoin_acct();
  static const int kBitcoinAcctFieldNumber = 2;
  inline const ::opentxs::OTDB::BitcoinAcct_InternalPB& bitcoin_acct(int index) const;
  inline ::opentxs::OTDB::BitcoinAcct_InternalPB* mutable_bitcoin_acct(int index);
  inline ::opentxs::OTDB::BitcoinAcct_InternalPB* add_bitcoin_acct();
  inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB >&
      bitcoin_acct() const;
  inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB >*
      mutable_bitcoin_acct();

  // repeated .opentxs.OTDB.RippleServer_InternalPB ripple_server = 3;
  inline int ripple_server_size() const;
  inline void clear_ripple_server();
  static const int kRippleServerFieldNumber = 3;
  inline const ::opentxs::OTDB::RippleServer_InternalPB& ripple_server(int index) const;
  inline ::opentxs::OTDB::RippleServer_InternalPB* mutable_ripple_server(int index);
  inline ::opentxs::OTDB::RippleServer_InternalPB* add_ripple_server();
  inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB >&
      ripple_server() const;
  inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB >*
      mutable_ripple_server();

  // repeated .opentxs.OTDB.LoomServer_InternalPB loom_server = 4;
  inline int loom_server_size() const;
  inline void clear_loom_server();
  static const int kLoomServerFieldNumber = 4;
  inline const ::opentxs::OTDB::LoomServer_InternalPB& loom_server(int index) const;
  inline ::opentxs::OTDB::LoomServer_InternalPB* mutable_loom_server(int index);
  inline ::opentxs::OTDB::LoomServer_InternalPB* add_loom_server();
  inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB >&
      loom_server() const;
  inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB >*
      mutable_loom_server();

  // @@protoc_insertion_point(class_scope:opentxs.OTDB.WalletData_InternalPB)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB > bitcoin_server_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB > bitcoin_acct_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB > ripple_server_;
  ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB > loom_server_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Moneychanger_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Moneychanger_2eproto();
  #endif
  friend void protobuf_AssignDesc_Moneychanger_2eproto();
  friend void protobuf_ShutdownFile_Moneychanger_2eproto();

  void InitAsDefaultInstance();
  static WalletData_InternalPB* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerInfo_InternalPB

// optional string server_type = 1;
inline bool ServerInfo_InternalPB::has_server_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo_InternalPB::set_has_server_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo_InternalPB::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo_InternalPB::clear_server_type() {
  if (server_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_->clear();
  }
  clear_has_server_type();
}
inline const ::std::string& ServerInfo_InternalPB::server_type() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ServerInfo_InternalPB.server_type)
  return *server_type_;
}
inline void ServerInfo_InternalPB::set_server_type(const ::std::string& value) {
  set_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_ = new ::std::string;
  }
  server_type_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ServerInfo_InternalPB.server_type)
}
inline void ServerInfo_InternalPB::set_server_type(const char* value) {
  set_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_ = new ::std::string;
  }
  server_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ServerInfo_InternalPB.server_type)
}
inline void ServerInfo_InternalPB::set_server_type(const char* value, size_t size) {
  set_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_ = new ::std::string;
  }
  server_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ServerInfo_InternalPB.server_type)
}
inline ::std::string* ServerInfo_InternalPB::mutable_server_type() {
  set_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ServerInfo_InternalPB.server_type)
  return server_type_;
}
inline ::std::string* ServerInfo_InternalPB::release_server_type() {
  clear_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_type_;
    server_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerInfo_InternalPB::set_allocated_server_type(::std::string* server_type) {
  if (server_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_type_;
  }
  if (server_type) {
    set_has_server_type();
    server_type_ = server_type;
  } else {
    clear_has_server_type();
    server_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ServerInfo_InternalPB.server_type)
}

// optional string notary_id = 2;
inline bool ServerInfo_InternalPB::has_notary_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo_InternalPB::set_has_notary_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo_InternalPB::clear_has_notary_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo_InternalPB::clear_notary_id() {
  if (notary_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_->clear();
  }
  clear_has_notary_id();
}
inline const ::std::string& ServerInfo_InternalPB::notary_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
  return *notary_id_;
}
inline void ServerInfo_InternalPB::set_notary_id(const ::std::string& value) {
  set_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_ = new ::std::string;
  }
  notary_id_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
}
inline void ServerInfo_InternalPB::set_notary_id(const char* value) {
  set_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_ = new ::std::string;
  }
  notary_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
}
inline void ServerInfo_InternalPB::set_notary_id(const char* value, size_t size) {
  set_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_ = new ::std::string;
  }
  notary_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
}
inline ::std::string* ServerInfo_InternalPB::mutable_notary_id() {
  set_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
  return notary_id_;
}
inline ::std::string* ServerInfo_InternalPB::release_notary_id() {
  clear_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notary_id_;
    notary_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerInfo_InternalPB::set_allocated_notary_id(::std::string* notary_id) {
  if (notary_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notary_id_;
  }
  if (notary_id) {
    set_has_notary_id();
    notary_id_ = notary_id;
  } else {
    clear_has_notary_id();
    notary_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ServerInfo_InternalPB.notary_id)
}

// -------------------------------------------------------------------

// ContactNym_InternalPB

// optional string gui_label = 1;
inline bool ContactNym_InternalPB::has_gui_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactNym_InternalPB::set_has_gui_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactNym_InternalPB::clear_has_gui_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactNym_InternalPB::clear_gui_label() {
  if (gui_label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_->clear();
  }
  clear_has_gui_label();
}
inline const ::std::string& ContactNym_InternalPB::gui_label() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.gui_label)
  return *gui_label_;
}
inline void ContactNym_InternalPB::set_gui_label(const ::std::string& value) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.gui_label)
}
inline void ContactNym_InternalPB::set_gui_label(const char* value) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.gui_label)
}
inline void ContactNym_InternalPB::set_gui_label(const char* value, size_t size) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.gui_label)
}
inline ::std::string* ContactNym_InternalPB::mutable_gui_label() {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.gui_label)
  return gui_label_;
}
inline ::std::string* ContactNym_InternalPB::release_gui_label() {
  clear_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gui_label_;
    gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactNym_InternalPB::set_allocated_gui_label(::std::string* gui_label) {
  if (gui_label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gui_label_;
  }
  if (gui_label) {
    set_has_gui_label();
    gui_label_ = gui_label;
  } else {
    clear_has_gui_label();
    gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.gui_label)
}

// optional string nym_type = 2;
inline bool ContactNym_InternalPB::has_nym_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactNym_InternalPB::set_has_nym_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactNym_InternalPB::clear_has_nym_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactNym_InternalPB::clear_nym_type() {
  if (nym_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_type_->clear();
  }
  clear_has_nym_type();
}
inline const ::std::string& ContactNym_InternalPB::nym_type() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.nym_type)
  return *nym_type_;
}
inline void ContactNym_InternalPB::set_nym_type(const ::std::string& value) {
  set_has_nym_type();
  if (nym_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_type_ = new ::std::string;
  }
  nym_type_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.nym_type)
}
inline void ContactNym_InternalPB::set_nym_type(const char* value) {
  set_has_nym_type();
  if (nym_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_type_ = new ::std::string;
  }
  nym_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.nym_type)
}
inline void ContactNym_InternalPB::set_nym_type(const char* value, size_t size) {
  set_has_nym_type();
  if (nym_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_type_ = new ::std::string;
  }
  nym_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.nym_type)
}
inline ::std::string* ContactNym_InternalPB::mutable_nym_type() {
  set_has_nym_type();
  if (nym_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.nym_type)
  return nym_type_;
}
inline ::std::string* ContactNym_InternalPB::release_nym_type() {
  clear_has_nym_type();
  if (nym_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nym_type_;
    nym_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactNym_InternalPB::set_allocated_nym_type(::std::string* nym_type) {
  if (nym_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nym_type_;
  }
  if (nym_type) {
    set_has_nym_type();
    nym_type_ = nym_type;
  } else {
    clear_has_nym_type();
    nym_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.nym_type)
}

// optional string nym_id = 3;
inline bool ContactNym_InternalPB::has_nym_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactNym_InternalPB::set_has_nym_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactNym_InternalPB::clear_has_nym_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactNym_InternalPB::clear_nym_id() {
  if (nym_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_->clear();
  }
  clear_has_nym_id();
}
inline const ::std::string& ContactNym_InternalPB::nym_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.nym_id)
  return *nym_id_;
}
inline void ContactNym_InternalPB::set_nym_id(const ::std::string& value) {
  set_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_ = new ::std::string;
  }
  nym_id_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.nym_id)
}
inline void ContactNym_InternalPB::set_nym_id(const char* value) {
  set_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_ = new ::std::string;
  }
  nym_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.nym_id)
}
inline void ContactNym_InternalPB::set_nym_id(const char* value, size_t size) {
  set_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_ = new ::std::string;
  }
  nym_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.nym_id)
}
inline ::std::string* ContactNym_InternalPB::mutable_nym_id() {
  set_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.nym_id)
  return nym_id_;
}
inline ::std::string* ContactNym_InternalPB::release_nym_id() {
  clear_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nym_id_;
    nym_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactNym_InternalPB::set_allocated_nym_id(::std::string* nym_id) {
  if (nym_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nym_id_;
  }
  if (nym_id) {
    set_has_nym_id();
    nym_id_ = nym_id;
  } else {
    clear_has_nym_id();
    nym_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.nym_id)
}

// optional string public_key = 4;
inline bool ContactNym_InternalPB::has_public_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactNym_InternalPB::set_has_public_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactNym_InternalPB::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactNym_InternalPB::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& ContactNym_InternalPB::public_key() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.public_key)
  return *public_key_;
}
inline void ContactNym_InternalPB::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.public_key)
}
inline void ContactNym_InternalPB::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.public_key)
}
inline void ContactNym_InternalPB::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.public_key)
}
inline ::std::string* ContactNym_InternalPB::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.public_key)
  return public_key_;
}
inline ::std::string* ContactNym_InternalPB::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactNym_InternalPB::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.public_key)
}

// optional string memo = 5;
inline bool ContactNym_InternalPB::has_memo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactNym_InternalPB::set_has_memo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactNym_InternalPB::clear_has_memo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactNym_InternalPB::clear_memo() {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_->clear();
  }
  clear_has_memo();
}
inline const ::std::string& ContactNym_InternalPB::memo() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.memo)
  return *memo_;
}
inline void ContactNym_InternalPB::set_memo(const ::std::string& value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactNym_InternalPB.memo)
}
inline void ContactNym_InternalPB::set_memo(const char* value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactNym_InternalPB.memo)
}
inline void ContactNym_InternalPB::set_memo(const char* value, size_t size) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactNym_InternalPB.memo)
}
inline ::std::string* ContactNym_InternalPB::mutable_memo() {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.memo)
  return memo_;
}
inline ::std::string* ContactNym_InternalPB::release_memo() {
  clear_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = memo_;
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactNym_InternalPB::set_allocated_memo(::std::string* memo) {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memo_;
  }
  if (memo) {
    set_has_memo();
    memo_ = memo;
  } else {
    clear_has_memo();
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactNym_InternalPB.memo)
}

// repeated .opentxs.OTDB.ServerInfo_InternalPB servers = 6;
inline int ContactNym_InternalPB::servers_size() const {
  return servers_.size();
}
inline void ContactNym_InternalPB::clear_servers() {
  servers_.Clear();
}
inline const ::opentxs::OTDB::ServerInfo_InternalPB& ContactNym_InternalPB::servers(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactNym_InternalPB.servers)
  return servers_.Get(index);
}
inline ::opentxs::OTDB::ServerInfo_InternalPB* ContactNym_InternalPB::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactNym_InternalPB.servers)
  return servers_.Mutable(index);
}
inline ::opentxs::OTDB::ServerInfo_InternalPB* ContactNym_InternalPB::add_servers() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.ContactNym_InternalPB.servers)
  return servers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB >&
ContactNym_InternalPB::servers() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.ContactNym_InternalPB.servers)
  return servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ServerInfo_InternalPB >*
ContactNym_InternalPB::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.ContactNym_InternalPB.servers)
  return &servers_;
}

// -------------------------------------------------------------------

// ContactAcct_InternalPB

// optional string gui_label = 1;
inline bool ContactAcct_InternalPB::has_gui_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContactAcct_InternalPB::set_has_gui_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContactAcct_InternalPB::clear_has_gui_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContactAcct_InternalPB::clear_gui_label() {
  if (gui_label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_->clear();
  }
  clear_has_gui_label();
}
inline const ::std::string& ContactAcct_InternalPB::gui_label() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
  return *gui_label_;
}
inline void ContactAcct_InternalPB::set_gui_label(const ::std::string& value) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
}
inline void ContactAcct_InternalPB::set_gui_label(const char* value) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
}
inline void ContactAcct_InternalPB::set_gui_label(const char* value, size_t size) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
}
inline ::std::string* ContactAcct_InternalPB::mutable_gui_label() {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
  return gui_label_;
}
inline ::std::string* ContactAcct_InternalPB::release_gui_label() {
  clear_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gui_label_;
    gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactAcct_InternalPB::set_allocated_gui_label(::std::string* gui_label) {
  if (gui_label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gui_label_;
  }
  if (gui_label) {
    set_has_gui_label();
    gui_label_ = gui_label;
  } else {
    clear_has_gui_label();
    gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.gui_label)
}

// optional string server_type = 2;
inline bool ContactAcct_InternalPB::has_server_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContactAcct_InternalPB::set_has_server_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContactAcct_InternalPB::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContactAcct_InternalPB::clear_server_type() {
  if (server_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_->clear();
  }
  clear_has_server_type();
}
inline const ::std::string& ContactAcct_InternalPB::server_type() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.server_type)
  return *server_type_;
}
inline void ContactAcct_InternalPB::set_server_type(const ::std::string& value) {
  set_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_ = new ::std::string;
  }
  server_type_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.server_type)
}
inline void ContactAcct_InternalPB::set_server_type(const char* value) {
  set_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_ = new ::std::string;
  }
  server_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.server_type)
}
inline void ContactAcct_InternalPB::set_server_type(const char* value, size_t size) {
  set_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_ = new ::std::string;
  }
  server_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.server_type)
}
inline ::std::string* ContactAcct_InternalPB::mutable_server_type() {
  set_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.server_type)
  return server_type_;
}
inline ::std::string* ContactAcct_InternalPB::release_server_type() {
  clear_has_server_type();
  if (server_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_type_;
    server_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactAcct_InternalPB::set_allocated_server_type(::std::string* server_type) {
  if (server_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_type_;
  }
  if (server_type) {
    set_has_server_type();
    server_type_ = server_type;
  } else {
    clear_has_server_type();
    server_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.server_type)
}

// optional string notary_id = 3;
inline bool ContactAcct_InternalPB::has_notary_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContactAcct_InternalPB::set_has_notary_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContactAcct_InternalPB::clear_has_notary_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContactAcct_InternalPB::clear_notary_id() {
  if (notary_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_->clear();
  }
  clear_has_notary_id();
}
inline const ::std::string& ContactAcct_InternalPB::notary_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
  return *notary_id_;
}
inline void ContactAcct_InternalPB::set_notary_id(const ::std::string& value) {
  set_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_ = new ::std::string;
  }
  notary_id_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
}
inline void ContactAcct_InternalPB::set_notary_id(const char* value) {
  set_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_ = new ::std::string;
  }
  notary_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
}
inline void ContactAcct_InternalPB::set_notary_id(const char* value, size_t size) {
  set_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_ = new ::std::string;
  }
  notary_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
}
inline ::std::string* ContactAcct_InternalPB::mutable_notary_id() {
  set_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notary_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
  return notary_id_;
}
inline ::std::string* ContactAcct_InternalPB::release_notary_id() {
  clear_has_notary_id();
  if (notary_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notary_id_;
    notary_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactAcct_InternalPB::set_allocated_notary_id(::std::string* notary_id) {
  if (notary_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notary_id_;
  }
  if (notary_id) {
    set_has_notary_id();
    notary_id_ = notary_id;
  } else {
    clear_has_notary_id();
    notary_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.notary_id)
}

// optional string instrument_definition_id = 4;
inline bool ContactAcct_InternalPB::has_instrument_definition_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContactAcct_InternalPB::set_has_instrument_definition_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContactAcct_InternalPB::clear_has_instrument_definition_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContactAcct_InternalPB::clear_instrument_definition_id() {
  if (instrument_definition_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_definition_id_->clear();
  }
  clear_has_instrument_definition_id();
}
inline const ::std::string& ContactAcct_InternalPB::instrument_definition_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
  return *instrument_definition_id_;
}
inline void ContactAcct_InternalPB::set_instrument_definition_id(const ::std::string& value) {
  set_has_instrument_definition_id();
  if (instrument_definition_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_definition_id_ = new ::std::string;
  }
  instrument_definition_id_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
}
inline void ContactAcct_InternalPB::set_instrument_definition_id(const char* value) {
  set_has_instrument_definition_id();
  if (instrument_definition_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_definition_id_ = new ::std::string;
  }
  instrument_definition_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
}
inline void ContactAcct_InternalPB::set_instrument_definition_id(const char* value, size_t size) {
  set_has_instrument_definition_id();
  if (instrument_definition_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_definition_id_ = new ::std::string;
  }
  instrument_definition_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
}
inline ::std::string* ContactAcct_InternalPB::mutable_instrument_definition_id() {
  set_has_instrument_definition_id();
  if (instrument_definition_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    instrument_definition_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
  return instrument_definition_id_;
}
inline ::std::string* ContactAcct_InternalPB::release_instrument_definition_id() {
  clear_has_instrument_definition_id();
  if (instrument_definition_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = instrument_definition_id_;
    instrument_definition_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactAcct_InternalPB::set_allocated_instrument_definition_id(::std::string* instrument_definition_id) {
  if (instrument_definition_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instrument_definition_id_;
  }
  if (instrument_definition_id) {
    set_has_instrument_definition_id();
    instrument_definition_id_ = instrument_definition_id;
  } else {
    clear_has_instrument_definition_id();
    instrument_definition_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.instrument_definition_id)
}

// optional string acct_id = 5;
inline bool ContactAcct_InternalPB::has_acct_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContactAcct_InternalPB::set_has_acct_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContactAcct_InternalPB::clear_has_acct_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContactAcct_InternalPB::clear_acct_id() {
  if (acct_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acct_id_->clear();
  }
  clear_has_acct_id();
}
inline const ::std::string& ContactAcct_InternalPB::acct_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
  return *acct_id_;
}
inline void ContactAcct_InternalPB::set_acct_id(const ::std::string& value) {
  set_has_acct_id();
  if (acct_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acct_id_ = new ::std::string;
  }
  acct_id_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
}
inline void ContactAcct_InternalPB::set_acct_id(const char* value) {
  set_has_acct_id();
  if (acct_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acct_id_ = new ::std::string;
  }
  acct_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
}
inline void ContactAcct_InternalPB::set_acct_id(const char* value, size_t size) {
  set_has_acct_id();
  if (acct_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acct_id_ = new ::std::string;
  }
  acct_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
}
inline ::std::string* ContactAcct_InternalPB::mutable_acct_id() {
  set_has_acct_id();
  if (acct_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    acct_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
  return acct_id_;
}
inline ::std::string* ContactAcct_InternalPB::release_acct_id() {
  clear_has_acct_id();
  if (acct_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = acct_id_;
    acct_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactAcct_InternalPB::set_allocated_acct_id(::std::string* acct_id) {
  if (acct_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acct_id_;
  }
  if (acct_id) {
    set_has_acct_id();
    acct_id_ = acct_id;
  } else {
    clear_has_acct_id();
    acct_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.acct_id)
}

// optional string nym_id = 6;
inline bool ContactAcct_InternalPB::has_nym_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContactAcct_InternalPB::set_has_nym_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContactAcct_InternalPB::clear_has_nym_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContactAcct_InternalPB::clear_nym_id() {
  if (nym_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_->clear();
  }
  clear_has_nym_id();
}
inline const ::std::string& ContactAcct_InternalPB::nym_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
  return *nym_id_;
}
inline void ContactAcct_InternalPB::set_nym_id(const ::std::string& value) {
  set_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_ = new ::std::string;
  }
  nym_id_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
}
inline void ContactAcct_InternalPB::set_nym_id(const char* value) {
  set_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_ = new ::std::string;
  }
  nym_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
}
inline void ContactAcct_InternalPB::set_nym_id(const char* value, size_t size) {
  set_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_ = new ::std::string;
  }
  nym_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
}
inline ::std::string* ContactAcct_InternalPB::mutable_nym_id() {
  set_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nym_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
  return nym_id_;
}
inline ::std::string* ContactAcct_InternalPB::release_nym_id() {
  clear_has_nym_id();
  if (nym_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nym_id_;
    nym_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactAcct_InternalPB::set_allocated_nym_id(::std::string* nym_id) {
  if (nym_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nym_id_;
  }
  if (nym_id) {
    set_has_nym_id();
    nym_id_ = nym_id;
  } else {
    clear_has_nym_id();
    nym_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.nym_id)
}

// optional string memo = 7;
inline bool ContactAcct_InternalPB::has_memo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContactAcct_InternalPB::set_has_memo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContactAcct_InternalPB::clear_has_memo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContactAcct_InternalPB::clear_memo() {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_->clear();
  }
  clear_has_memo();
}
inline const ::std::string& ContactAcct_InternalPB::memo() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.memo)
  return *memo_;
}
inline void ContactAcct_InternalPB::set_memo(const ::std::string& value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.memo)
}
inline void ContactAcct_InternalPB::set_memo(const char* value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.memo)
}
inline void ContactAcct_InternalPB::set_memo(const char* value, size_t size) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.memo)
}
inline ::std::string* ContactAcct_InternalPB::mutable_memo() {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.memo)
  return memo_;
}
inline ::std::string* ContactAcct_InternalPB::release_memo() {
  clear_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = memo_;
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactAcct_InternalPB::set_allocated_memo(::std::string* memo) {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memo_;
  }
  if (memo) {
    set_has_memo();
    memo_ = memo;
  } else {
    clear_has_memo();
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.memo)
}

// optional string public_key = 8;
inline bool ContactAcct_InternalPB::has_public_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContactAcct_InternalPB::set_has_public_key() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContactAcct_InternalPB::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContactAcct_InternalPB::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& ContactAcct_InternalPB::public_key() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.ContactAcct_InternalPB.public_key)
  return *public_key_;
}
inline void ContactAcct_InternalPB::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.ContactAcct_InternalPB.public_key)
}
inline void ContactAcct_InternalPB::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.ContactAcct_InternalPB.public_key)
}
inline void ContactAcct_InternalPB::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.ContactAcct_InternalPB.public_key)
}
inline ::std::string* ContactAcct_InternalPB::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.ContactAcct_InternalPB.public_key)
  return public_key_;
}
inline ::std::string* ContactAcct_InternalPB::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContactAcct_InternalPB::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.ContactAcct_InternalPB.public_key)
}

// -------------------------------------------------------------------

// Contact_InternalPB

// optional string gui_label = 1;
inline bool Contact_InternalPB::has_gui_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contact_InternalPB::set_has_gui_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contact_InternalPB::clear_has_gui_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contact_InternalPB::clear_gui_label() {
  if (gui_label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_->clear();
  }
  clear_has_gui_label();
}
inline const ::std::string& Contact_InternalPB::gui_label() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.gui_label)
  return *gui_label_;
}
inline void Contact_InternalPB::set_gui_label(const ::std::string& value) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.gui_label)
}
inline void Contact_InternalPB::set_gui_label(const char* value) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.gui_label)
}
inline void Contact_InternalPB::set_gui_label(const char* value, size_t size) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.gui_label)
}
inline ::std::string* Contact_InternalPB::mutable_gui_label() {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gui_label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.gui_label)
  return gui_label_;
}
inline ::std::string* Contact_InternalPB::release_gui_label() {
  clear_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gui_label_;
    gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Contact_InternalPB::set_allocated_gui_label(::std::string* gui_label) {
  if (gui_label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gui_label_;
  }
  if (gui_label) {
    set_has_gui_label();
    gui_label_ = gui_label;
  } else {
    clear_has_gui_label();
    gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.gui_label)
}

// optional string contact_id = 2;
inline bool Contact_InternalPB::has_contact_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contact_InternalPB::set_has_contact_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contact_InternalPB::clear_has_contact_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contact_InternalPB::clear_contact_id() {
  if (contact_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contact_id_->clear();
  }
  clear_has_contact_id();
}
inline const ::std::string& Contact_InternalPB::contact_id() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.contact_id)
  return *contact_id_;
}
inline void Contact_InternalPB::set_contact_id(const ::std::string& value) {
  set_has_contact_id();
  if (contact_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contact_id_ = new ::std::string;
  }
  contact_id_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.contact_id)
}
inline void Contact_InternalPB::set_contact_id(const char* value) {
  set_has_contact_id();
  if (contact_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contact_id_ = new ::std::string;
  }
  contact_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.contact_id)
}
inline void Contact_InternalPB::set_contact_id(const char* value, size_t size) {
  set_has_contact_id();
  if (contact_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contact_id_ = new ::std::string;
  }
  contact_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.contact_id)
}
inline ::std::string* Contact_InternalPB::mutable_contact_id() {
  set_has_contact_id();
  if (contact_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contact_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.contact_id)
  return contact_id_;
}
inline ::std::string* Contact_InternalPB::release_contact_id() {
  clear_has_contact_id();
  if (contact_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contact_id_;
    contact_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Contact_InternalPB::set_allocated_contact_id(::std::string* contact_id) {
  if (contact_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contact_id_;
  }
  if (contact_id) {
    set_has_contact_id();
    contact_id_ = contact_id;
  } else {
    clear_has_contact_id();
    contact_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.contact_id)
}

// optional string email = 3;
inline bool Contact_InternalPB::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Contact_InternalPB::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Contact_InternalPB::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Contact_InternalPB::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Contact_InternalPB::email() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.email)
  return *email_;
}
inline void Contact_InternalPB::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.email)
}
inline void Contact_InternalPB::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.email)
}
inline void Contact_InternalPB::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.email)
}
inline ::std::string* Contact_InternalPB::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.email)
  return email_;
}
inline ::std::string* Contact_InternalPB::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Contact_InternalPB::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.email)
}

// optional string memo = 4;
inline bool Contact_InternalPB::has_memo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Contact_InternalPB::set_has_memo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Contact_InternalPB::clear_has_memo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Contact_InternalPB::clear_memo() {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_->clear();
  }
  clear_has_memo();
}
inline const ::std::string& Contact_InternalPB::memo() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.memo)
  return *memo_;
}
inline void Contact_InternalPB::set_memo(const ::std::string& value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.memo)
}
inline void Contact_InternalPB::set_memo(const char* value) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.memo)
}
inline void Contact_InternalPB::set_memo(const char* value, size_t size) {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  memo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.memo)
}
inline ::std::string* Contact_InternalPB::mutable_memo() {
  set_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.memo)
  return memo_;
}
inline ::std::string* Contact_InternalPB::release_memo() {
  clear_has_memo();
  if (memo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = memo_;
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Contact_InternalPB::set_allocated_memo(::std::string* memo) {
  if (memo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memo_;
  }
  if (memo) {
    set_has_memo();
    memo_ = memo;
  } else {
    clear_has_memo();
    memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.memo)
}

// optional string public_key = 5;
inline bool Contact_InternalPB::has_public_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Contact_InternalPB::set_has_public_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Contact_InternalPB::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Contact_InternalPB::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& Contact_InternalPB::public_key() const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.public_key)
  return *public_key_;
}
inline void Contact_InternalPB::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
  // @@protoc_insertion_point(field_set:opentxs.OTDB.Contact_InternalPB.public_key)
}
inline void Contact_InternalPB::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:opentxs.OTDB.Contact_InternalPB.public_key)
}
inline void Contact_InternalPB::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opentxs.OTDB.Contact_InternalPB.public_key)
}
inline ::std::string* Contact_InternalPB::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.public_key)
  return public_key_;
}
inline ::std::string* Contact_InternalPB::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Contact_InternalPB::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:opentxs.OTDB.Contact_InternalPB.public_key)
}

// repeated .opentxs.OTDB.ContactNym_InternalPB nyms = 6;
inline int Contact_InternalPB::nyms_size() const {
  return nyms_.size();
}
inline void Contact_InternalPB::clear_nyms() {
  nyms_.Clear();
}
inline const ::opentxs::OTDB::ContactNym_InternalPB& Contact_InternalPB::nyms(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.nyms)
  return nyms_.Get(index);
}
inline ::opentxs::OTDB::ContactNym_InternalPB* Contact_InternalPB::mutable_nyms(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.nyms)
  return nyms_.Mutable(index);
}
inline ::opentxs::OTDB::ContactNym_InternalPB* Contact_InternalPB::add_nyms() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.Contact_InternalPB.nyms)
  return nyms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB >&
Contact_InternalPB::nyms() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.Contact_InternalPB.nyms)
  return nyms_;
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactNym_InternalPB >*
Contact_InternalPB::mutable_nyms() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.Contact_InternalPB.nyms)
  return &nyms_;
}

// repeated .opentxs.OTDB.ContactAcct_InternalPB accounts = 7;
inline int Contact_InternalPB::accounts_size() const {
  return accounts_.size();
}
inline void Contact_InternalPB::clear_accounts() {
  accounts_.Clear();
}
inline const ::opentxs::OTDB::ContactAcct_InternalPB& Contact_InternalPB::accounts(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.Contact_InternalPB.accounts)
  return accounts_.Get(index);
}
inline ::opentxs::OTDB::ContactAcct_InternalPB* Contact_InternalPB::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.Contact_InternalPB.accounts)
  return accounts_.Mutable(index);
}
inline ::opentxs::OTDB::ContactAcct_InternalPB* Contact_InternalPB::add_accounts() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.Contact_InternalPB.accounts)
  return accounts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB >&
Contact_InternalPB::accounts() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.Contact_InternalPB.accounts)
  return accounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::ContactAcct_InternalPB >*
Contact_InternalPB::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.Contact_InternalPB.accounts)
  return &accounts_;
}

// -------------------------------------------------------------------

// AddressBook_InternalPB

// repeated .opentxs.OTDB.Contact_InternalPB contacts = 1;
inline int AddressBook_InternalPB::contacts_size() const {
  return contacts_.size();
}
inline void AddressBook_InternalPB::clear_contacts() {
  contacts_.Clear();
}
inline const ::opentxs::OTDB::Contact_InternalPB& AddressBook_InternalPB::contacts(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return contacts_.Get(index);
}
inline ::opentxs::OTDB::Contact_InternalPB* AddressBook_InternalPB::mutable_contacts(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return contacts_.Mutable(index);
}
inline ::opentxs::OTDB::Contact_InternalPB* AddressBook_InternalPB::add_contacts() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return contacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB >&
AddressBook_InternalPB::contacts() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return contacts_;
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::Contact_InternalPB >*
AddressBook_InternalPB::mutable_contacts() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.AddressBook_InternalPB.contacts)
  return &contacts_;
}

// -------------------------------------------------------------------

// WalletData_InternalPB

// repeated .opentxs.OTDB.BitcoinServer_InternalPB bitcoin_server = 1;
inline int WalletData_InternalPB::bitcoin_server_size() const {
  return bitcoin_server_.size();
}
inline void WalletData_InternalPB::clear_bitcoin_server() {
  bitcoin_server_.Clear();
}
inline const ::opentxs::OTDB::BitcoinServer_InternalPB& WalletData_InternalPB::bitcoin_server(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return bitcoin_server_.Get(index);
}
inline ::opentxs::OTDB::BitcoinServer_InternalPB* WalletData_InternalPB::mutable_bitcoin_server(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return bitcoin_server_.Mutable(index);
}
inline ::opentxs::OTDB::BitcoinServer_InternalPB* WalletData_InternalPB::add_bitcoin_server() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return bitcoin_server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB >&
WalletData_InternalPB::bitcoin_server() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return bitcoin_server_;
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinServer_InternalPB >*
WalletData_InternalPB::mutable_bitcoin_server() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.WalletData_InternalPB.bitcoin_server)
  return &bitcoin_server_;
}

// repeated .opentxs.OTDB.BitcoinAcct_InternalPB bitcoin_acct = 2;
inline int WalletData_InternalPB::bitcoin_acct_size() const {
  return bitcoin_acct_.size();
}
inline void WalletData_InternalPB::clear_bitcoin_acct() {
  bitcoin_acct_.Clear();
}
inline const ::opentxs::OTDB::BitcoinAcct_InternalPB& WalletData_InternalPB::bitcoin_acct(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return bitcoin_acct_.Get(index);
}
inline ::opentxs::OTDB::BitcoinAcct_InternalPB* WalletData_InternalPB::mutable_bitcoin_acct(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return bitcoin_acct_.Mutable(index);
}
inline ::opentxs::OTDB::BitcoinAcct_InternalPB* WalletData_InternalPB::add_bitcoin_acct() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return bitcoin_acct_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB >&
WalletData_InternalPB::bitcoin_acct() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return bitcoin_acct_;
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::BitcoinAcct_InternalPB >*
WalletData_InternalPB::mutable_bitcoin_acct() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.WalletData_InternalPB.bitcoin_acct)
  return &bitcoin_acct_;
}

// repeated .opentxs.OTDB.RippleServer_InternalPB ripple_server = 3;
inline int WalletData_InternalPB::ripple_server_size() const {
  return ripple_server_.size();
}
inline void WalletData_InternalPB::clear_ripple_server() {
  ripple_server_.Clear();
}
inline const ::opentxs::OTDB::RippleServer_InternalPB& WalletData_InternalPB::ripple_server(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return ripple_server_.Get(index);
}
inline ::opentxs::OTDB::RippleServer_InternalPB* WalletData_InternalPB::mutable_ripple_server(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return ripple_server_.Mutable(index);
}
inline ::opentxs::OTDB::RippleServer_InternalPB* WalletData_InternalPB::add_ripple_server() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return ripple_server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB >&
WalletData_InternalPB::ripple_server() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return ripple_server_;
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::RippleServer_InternalPB >*
WalletData_InternalPB::mutable_ripple_server() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.WalletData_InternalPB.ripple_server)
  return &ripple_server_;
}

// repeated .opentxs.OTDB.LoomServer_InternalPB loom_server = 4;
inline int WalletData_InternalPB::loom_server_size() const {
  return loom_server_.size();
}
inline void WalletData_InternalPB::clear_loom_server() {
  loom_server_.Clear();
}
inline const ::opentxs::OTDB::LoomServer_InternalPB& WalletData_InternalPB::loom_server(int index) const {
  // @@protoc_insertion_point(field_get:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return loom_server_.Get(index);
}
inline ::opentxs::OTDB::LoomServer_InternalPB* WalletData_InternalPB::mutable_loom_server(int index) {
  // @@protoc_insertion_point(field_mutable:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return loom_server_.Mutable(index);
}
inline ::opentxs::OTDB::LoomServer_InternalPB* WalletData_InternalPB::add_loom_server() {
  // @@protoc_insertion_point(field_add:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return loom_server_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB >&
WalletData_InternalPB::loom_server() const {
  // @@protoc_insertion_point(field_list:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return loom_server_;
}
inline ::google::protobuf::RepeatedPtrField< ::opentxs::OTDB::LoomServer_InternalPB >*
WalletData_InternalPB::mutable_loom_server() {
  // @@protoc_insertion_point(field_mutable_list:opentxs.OTDB.WalletData_InternalPB.loom_server)
  return &loom_server_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OTDB
}  // namespace opentxs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Moneychanger_2eproto__INCLUDED
